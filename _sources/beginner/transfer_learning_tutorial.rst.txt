

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


전이학습(Transfer Learning) 튜토리얼
====================================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_
  **번역**: `박정환 <http://github.com/9bow>`_

이 튜토리얼에서는 전이학습(Transfer Learning)을 이용하여 신경망을 어떻게 학습시키는지
배워보겠습니다. 전이학습에 대해서 더 알아보시려면
`CS231n 노트 <http://cs231n.github.io/transfer-learning/>`__ 를 읽어보시면 좋습니다.

위 노트를 인용해보면,

    실제로 충분한 크기의 데이터셋을 갖추기는 상대적으로 드물기 때문에,
    (무작위 초기화를 통해) 바닥부터(from scratch) 전체 합성곱 신경망(Convolutional
    Network)를 학습하는 사람은 거의 없습니다. 대신, 매우 큰 데이터셋(예.
    100가지 분류(Category)에 대해 120만개의 이미지가 포함된 ImageNet)에서 합성곱
    신경망(ConvNet)을 미리 학습(Pretrain)한 후, 이 합성곱 신경망을 관심있는 작업
    (task of interest)을 위한 초기화(initialization) 또는 고정 특징 추출기(fixed
    feature extractor)로 사용합니다.

이러한 2가지의 주요한 전이학습 시나리오는 다음과 같습니다:

-  **합성곱 신경망의 미세조정(Finetuning)**: 무작위 초기화 대신, 신경망을
   ImageNet 1000 데이터셋 등으로 미리 학습한 신경망으로 초기화합니다. 학습의 나머지
   과정들은 평상시와 같습니다.
-  **고정 특정 추출기로써의 합성곱 신경망**: 여기서는 마지막의 완전히 연결
   (Fully-connected)된 계층을 제외한 모든 신경망의 가중치를 고정합니다. 이
   마지막의 완전히 연결된 계층은 새로운 무작위의 가중치를 갖는 계층으로 대체되어
   이 계층만 학습합니다.





.. code-block:: python

    # License: BSD
    # Author: Sasank Chilamkurthy

    from __future__ import print_function, division

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.optim import lr_scheduler
    from torch.autograd import Variable
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import os
    import copy

    plt.ion()   # interactive mode







데이터 불러오기
---------------

데이터를 불러오기 위해 torchvision과 torch.utils.data 패키지를 사용하겠습니다.

오늘 풀고자 하는 문제는 **개미** 와 **벌** 을 분류하는 모델을 학습하는 것입니다.
각각의 분류에는 75개의 검증용 이미지(validation image)가 있습니다. 일반적으로,
만약 바닥부터 학습을 한다면, 이는 일반화하기에는 아주 작은 데이터셋입니다.
하지만 전이학습을 사용할 것이므로, 합리적으로 잘 일반화해 할 수 있습니다.

이 데이터셋은 ImageNet의 아주 작은 부분(Subset)입니다.

.. Note ::
   데이터를 `여기 <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   에서 다운로드 받아 현재 디렉토리에 압축을 푸십시오.



.. code-block:: python


    # 학습을 위한 데이터 증가(Augmentation)와 일반화하기
    # 단지 검증을 위한 일반화하기
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomResizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'hymenoptera_data'
    image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                              data_transforms[x])
                      for x in ['train', 'val']}
    dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,
                                                 shuffle=True, num_workers=4)
                  for x in ['train', 'val']}
    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
    class_names = image_datasets['train'].classes

    use_gpu = torch.cuda.is_available()







일부 이미지 시각화하기
^^^^^^^^^^^^^^^^^^^^^^^^^
데이터 증가를 이해하기 위해 일부 학습용 이미지를 시각화해보겠습니다.



.. code-block:: python


    def imshow(inp, title=None):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1)
        plt.imshow(inp)
        if title is not None:
            plt.title(title)
        plt.pause(0.001)  # pause a bit so that plots are updated


    # Get a batch of training data
    inputs, classes = next(iter(dataloaders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out, title=[class_names[x] for x in classes])





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
    :align: center




모델 학습하기
--------------

이제 모델을 학습하기 위한 일반 함수를 작성해보겠습니다. 여기서는 다음 내용들을
설명합니다:

-  Learning Rate 관리(Scheduling)
-  최적의 모델 구하기

아래에서 ``scheduler`` 매개변수는 ``torch.optim.lr_scheduler`` 의 LR Scheduler
객체(Object)입니다.



.. code-block:: python



    def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
        since = time.time()

        best_model_wts = copy.deepcopy(model.state_dict())
        best_acc = 0.0

        for epoch in range(num_epochs):
            print('Epoch {}/{}'.format(epoch, num_epochs - 1))
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    scheduler.step()
                    model.train(True)  # Set model to training mode
                else:
                    model.train(False)  # Set model to evaluate mode

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for data in dataloaders[phase]:
                    # get the inputs
                    inputs, labels = data

                    # wrap them in Variable
                    if use_gpu:
                        inputs = Variable(inputs.cuda())
                        labels = Variable(labels.cuda())
                    else:
                        inputs, labels = Variable(inputs), Variable(labels)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    outputs = model(inputs)
                    _, preds = torch.max(outputs.data, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                    # statistics
                    running_loss += loss.data[0] * inputs.size(0)
                    running_corrects += torch.sum(preds == labels.data)

                epoch_loss = running_loss / dataset_sizes[phase]
                epoch_acc = running_corrects / dataset_sizes[phase]

                print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                    phase, epoch_loss, epoch_acc))

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    best_model_wts = copy.deepcopy(model.state_dict())

            print()

        time_elapsed = time.time() - since
        print('Training complete in {:.0f}m {:.0f}s'.format(
            time_elapsed // 60, time_elapsed % 60))
        print('Best val Acc: {:4f}'.format(best_acc))

        # load best model weights
        model.load_state_dict(best_model_wts)
        return model








모델 예측값 시각화하기
^^^^^^^^^^^^^^^^^^^^^^^

일부 이미지에 대한 예측값을 보여주는 일반화된(Generic) 함수입니다.




.. code-block:: python


    def visualize_model(model, num_images=6):
        was_training = model.training
        model.eval()
        images_so_far = 0
        fig = plt.figure()

        for i, data in enumerate(dataloaders['val']):
            inputs, labels = data
            if use_gpu:
                inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)

            outputs = model(inputs)
            _, preds = torch.max(outputs.data, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images//2, 2, images_so_far)
                ax.axis('off')
                ax.set_title('predicted: {}'.format(class_names[preds[j]]))
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    model.train(mode=was_training)
                    return
        model.train(mode=was_training)







합성곱 신경망 미세조정(Finetuning)
----------------------------------

미리 학습한 모델을 불러온 후 마지막의 완전히 연결된 계층을 재설정(reset)합니다.




.. code-block:: python


    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_ft = model_ft.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)







학습과 평가하기
^^^^^^^^^^^^^^^^^^

CPU에서 15-25분 가량 소요될 것입니다. 그래도 GPU에서는 1분도 걸리지 않습니다.




.. code-block:: python


    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    train Loss: 0.5536 Acc: 0.7090
    val Loss: 0.3108 Acc: 0.8889

    Epoch 1/24
    ----------
    train Loss: 0.3982 Acc: 0.8238
    val Loss: 0.3000 Acc: 0.8889

    Epoch 2/24
    ----------
    train Loss: 0.5767 Acc: 0.7705
    val Loss: 0.8002 Acc: 0.6863

    Epoch 3/24
    ----------
    train Loss: 0.4600 Acc: 0.7869
    val Loss: 0.2950 Acc: 0.8824

    Epoch 4/24
    ----------
    train Loss: 0.6578 Acc: 0.7787
    val Loss: 0.2741 Acc: 0.8954

    Epoch 5/24
    ----------
    train Loss: 0.5902 Acc: 0.7992
    val Loss: 0.2234 Acc: 0.9150

    Epoch 6/24
    ----------
    train Loss: 0.5734 Acc: 0.8033
    val Loss: 0.5192 Acc: 0.8366

    Epoch 7/24
    ----------
    train Loss: 0.3746 Acc: 0.8484
    val Loss: 0.3102 Acc: 0.8693

    Epoch 8/24
    ----------
    train Loss: 0.3282 Acc: 0.8484
    val Loss: 0.2815 Acc: 0.9150

    Epoch 9/24
    ----------
    train Loss: 0.3426 Acc: 0.8525
    val Loss: 0.2715 Acc: 0.9020

    Epoch 10/24
    ----------
    train Loss: 0.2749 Acc: 0.8811
    val Loss: 0.2700 Acc: 0.9020

    Epoch 11/24
    ----------
    train Loss: 0.2856 Acc: 0.8811
    val Loss: 0.2655 Acc: 0.9150

    Epoch 12/24
    ----------
    train Loss: 0.3724 Acc: 0.8115
    val Loss: 0.2640 Acc: 0.9085

    Epoch 13/24
    ----------
    train Loss: 0.2575 Acc: 0.8770
    val Loss: 0.2631 Acc: 0.9150

    Epoch 14/24
    ----------
    train Loss: 0.1867 Acc: 0.9221
    val Loss: 0.2726 Acc: 0.8889

    Epoch 15/24
    ----------
    train Loss: 0.2888 Acc: 0.8852
    val Loss: 0.2633 Acc: 0.9085

    Epoch 16/24
    ----------
    train Loss: 0.2805 Acc: 0.8648
    val Loss: 0.2774 Acc: 0.9150

    Epoch 17/24
    ----------
    train Loss: 0.3161 Acc: 0.8770
    val Loss: 0.2677 Acc: 0.9020

    Epoch 18/24
    ----------
    train Loss: 0.2415 Acc: 0.8730
    val Loss: 0.2619 Acc: 0.9150

    Epoch 19/24
    ----------
    train Loss: 0.3380 Acc: 0.8689
    val Loss: 0.2541 Acc: 0.9085

    Epoch 20/24
    ----------
    train Loss: 0.2461 Acc: 0.8934
    val Loss: 0.2784 Acc: 0.9085

    Epoch 21/24
    ----------
    train Loss: 0.2769 Acc: 0.8730
    val Loss: 0.2517 Acc: 0.9085

    Epoch 22/24
    ----------
    train Loss: 0.2502 Acc: 0.8770
    val Loss: 0.2693 Acc: 0.9085

    Epoch 23/24
    ----------
    train Loss: 0.2849 Acc: 0.8811
    val Loss: 0.2491 Acc: 0.9020

    Epoch 24/24
    ----------
    train Loss: 0.2441 Acc: 0.8893
    val Loss: 0.2742 Acc: 0.8954

    Training complete in 0m 57s
    Best val Acc: 0.915033



.. code-block:: python


    visualize_model(model_ft)





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
    :align: center




ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad == False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <http://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.




.. code-block:: python


    model_conv = torchvision.models.resnet18(pretrained=True)
    for param in model_conv.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_conv = model_conv.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that only parameters of final layer are being optimized as
    # opoosed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)








Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.




.. code-block:: python


    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    train Loss: 0.5891 Acc: 0.6885
    val Loss: 0.3037 Acc: 0.8693

    Epoch 1/24
    ----------
    train Loss: 0.4437 Acc: 0.7746
    val Loss: 0.1777 Acc: 0.9477

    Epoch 2/24
    ----------
    train Loss: 0.5213 Acc: 0.7623
    val Loss: 0.2036 Acc: 0.9346

    Epoch 3/24
    ----------
    train Loss: 0.4531 Acc: 0.7664
    val Loss: 0.1799 Acc: 0.9346

    Epoch 4/24
    ----------
    train Loss: 0.3327 Acc: 0.8730
    val Loss: 0.1787 Acc: 0.9412

    Epoch 5/24
    ----------
    train Loss: 0.4530 Acc: 0.8033
    val Loss: 0.2856 Acc: 0.9150

    Epoch 6/24
    ----------
    train Loss: 0.3934 Acc: 0.8115
    val Loss: 0.2648 Acc: 0.9020

    Epoch 7/24
    ----------
    train Loss: 0.4031 Acc: 0.8115
    val Loss: 0.1798 Acc: 0.9412

    Epoch 8/24
    ----------
    train Loss: 0.2988 Acc: 0.8484
    val Loss: 0.1738 Acc: 0.9477

    Epoch 9/24
    ----------
    train Loss: 0.2607 Acc: 0.8811
    val Loss: 0.1969 Acc: 0.9542

    Epoch 10/24
    ----------
    train Loss: 0.4044 Acc: 0.8320
    val Loss: 0.1699 Acc: 0.9477

    Epoch 11/24
    ----------
    train Loss: 0.3852 Acc: 0.8238
    val Loss: 0.1927 Acc: 0.9412

    Epoch 12/24
    ----------
    train Loss: 0.3700 Acc: 0.8525
    val Loss: 0.1811 Acc: 0.9477

    Epoch 13/24
    ----------
    train Loss: 0.3770 Acc: 0.8238
    val Loss: 0.1654 Acc: 0.9477

    Epoch 14/24
    ----------
    train Loss: 0.3392 Acc: 0.8443
    val Loss: 0.1787 Acc: 0.9477

    Epoch 15/24
    ----------
    train Loss: 0.2654 Acc: 0.8648
    val Loss: 0.1986 Acc: 0.9412

    Epoch 16/24
    ----------
    train Loss: 0.3414 Acc: 0.8566
    val Loss: 0.1732 Acc: 0.9477

    Epoch 17/24
    ----------
    train Loss: 0.2898 Acc: 0.8893
    val Loss: 0.1733 Acc: 0.9477

    Epoch 18/24
    ----------
    train Loss: 0.4100 Acc: 0.8361
    val Loss: 0.1851 Acc: 0.9542

    Epoch 19/24
    ----------
    train Loss: 0.3515 Acc: 0.8443
    val Loss: 0.1778 Acc: 0.9542

    Epoch 20/24
    ----------
    train Loss: 0.3389 Acc: 0.8402
    val Loss: 0.1824 Acc: 0.9477

    Epoch 21/24
    ----------
    train Loss: 0.3315 Acc: 0.8320
    val Loss: 0.1591 Acc: 0.9477

    Epoch 22/24
    ----------
    train Loss: 0.3588 Acc: 0.8648
    val Loss: 0.1736 Acc: 0.9477

    Epoch 23/24
    ----------
    train Loss: 0.3215 Acc: 0.8648
    val Loss: 0.1825 Acc: 0.9412

    Epoch 24/24
    ----------
    train Loss: 0.2766 Acc: 0.8607
    val Loss: 0.1678 Acc: 0.9477

    Training complete in 0m 37s
    Best val Acc: 0.954248



.. code-block:: python


    visualize_model(model_conv)

    plt.ioff()
    plt.show()



.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
    :align: center




**Total running time of the script:** ( 1 minutes  41.881 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
