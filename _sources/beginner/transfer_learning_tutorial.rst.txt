

.. _sphx_glr_beginner_transfer_learning_tutorial.py:


Transfer Learning tutorial
==========================
**Author**: `Sasank Chilamkurthy <https://chsasank.github.io>`_

In this tutorial, you will learn how to train your network using
transfer learning. You can read more about the transfer learning at `cs231n
notes <http://cs231n.github.io/transfer-learning/>`__

Quoting these notes,

    In practice, very few people train an entire Convolutional Network
    from scratch (with random initialization), because it is relatively
    rare to have a dataset of sufficient size. Instead, it is common to
    pretrain a ConvNet on a very large dataset (e.g. ImageNet, which
    contains 1.2 million images with 1000 categories), and then use the
    ConvNet either as an initialization or a fixed feature extractor for
    the task of interest.

These two major transfer learning scenarios look as follows:

-  **Finetuning the convnet**: Instead of random initializaion, we
   initialize the network with a pretrained network, like the one that is
   trained on imagenet 1000 dataset. Rest of the training looks as
   usual.
-  **ConvNet as fixed feature extractor**: Here, we will freeze the weights
   for all of the network except that of the final fully connected
   layer. This last fully connected layer is replaced with a new one
   with random weights and only this layer is trained.




.. code-block:: python

    # License: BSD
    # Author: Sasank Chilamkurthy

    from __future__ import print_function, division

    import torch
    import torch.nn as nn
    import torch.optim as optim
    from torch.optim import lr_scheduler
    from torch.autograd import Variable
    import numpy as np
    import torchvision
    from torchvision import datasets, models, transforms
    import matplotlib.pyplot as plt
    import time
    import os
    import copy

    plt.ion()   # interactive mode







Load Data
---------

We will use torchvision and torch.utils.data packages for loading the
data.

The problem we're going to solve today is to train a model to classify
**ants** and **bees**. We have about 120 training images each for ants and bees.
There are 75 validation images for each class. Usually, this is a very
small dataset to generalize upon, if trained from scratch. Since we
are using transfer learning, we should be able to generalize reasonably
well.

This dataset is a very small subset of imagenet.

.. Note ::
   Download the data from
   `here <https://download.pytorch.org/tutorial/hymenoptera_data.zip>`_
   and extract it to the current directory.



.. code-block:: python


    # Data augmentation and normalization for training
    # Just normalization for validation
    data_transforms = {
        'train': transforms.Compose([
            transforms.RandomResizedCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
        'val': transforms.Compose([
            transforms.Resize(256),
            transforms.CenterCrop(224),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ]),
    }

    data_dir = 'hymenoptera_data'
    image_datasets = {x: datasets.ImageFolder(os.path.join(data_dir, x),
                                              data_transforms[x])
                      for x in ['train', 'val']}
    dataloaders = {x: torch.utils.data.DataLoader(image_datasets[x], batch_size=4,
                                                 shuffle=True, num_workers=4)
                  for x in ['train', 'val']}
    dataset_sizes = {x: len(image_datasets[x]) for x in ['train', 'val']}
    class_names = image_datasets['train'].classes

    use_gpu = torch.cuda.is_available()







Visualize a few images
^^^^^^^^^^^^^^^^^^^^^^
Let's visualize a few training images so as to understand the data
augmentations.



.. code-block:: python


    def imshow(inp, title=None):
        """Imshow for Tensor."""
        inp = inp.numpy().transpose((1, 2, 0))
        mean = np.array([0.485, 0.456, 0.406])
        std = np.array([0.229, 0.224, 0.225])
        inp = std * inp + mean
        inp = np.clip(inp, 0, 1)
        plt.imshow(inp)
        if title is not None:
            plt.title(title)
        plt.pause(0.001)  # pause a bit so that plots are updated


    # Get a batch of training data
    inputs, classes = next(iter(dataloaders['train']))

    # Make a grid from batch
    out = torchvision.utils.make_grid(inputs)

    imshow(out, title=[class_names[x] for x in classes])





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_001.png
    :align: center




Training the model
------------------

Now, let's write a general function to train a model. Here, we will
illustrate:

-  Scheduling the learning rate
-  Saving the best model

In the following, parameter ``scheduler`` is an LR scheduler object from
``torch.optim.lr_scheduler``.



.. code-block:: python



    def train_model(model, criterion, optimizer, scheduler, num_epochs=25):
        since = time.time()

        best_model_wts = copy.deepcopy(model.state_dict())
        best_acc = 0.0

        for epoch in range(num_epochs):
            print('Epoch {}/{}'.format(epoch, num_epochs - 1))
            print('-' * 10)

            # Each epoch has a training and validation phase
            for phase in ['train', 'val']:
                if phase == 'train':
                    scheduler.step()
                    model.train(True)  # Set model to training mode
                else:
                    model.train(False)  # Set model to evaluate mode

                running_loss = 0.0
                running_corrects = 0

                # Iterate over data.
                for data in dataloaders[phase]:
                    # get the inputs
                    inputs, labels = data

                    # wrap them in Variable
                    if use_gpu:
                        inputs = Variable(inputs.cuda())
                        labels = Variable(labels.cuda())
                    else:
                        inputs, labels = Variable(inputs), Variable(labels)

                    # zero the parameter gradients
                    optimizer.zero_grad()

                    # forward
                    outputs = model(inputs)
                    _, preds = torch.max(outputs.data, 1)
                    loss = criterion(outputs, labels)

                    # backward + optimize only if in training phase
                    if phase == 'train':
                        loss.backward()
                        optimizer.step()

                    # statistics
                    running_loss += loss.data[0] * inputs.size(0)
                    running_corrects += torch.sum(preds == labels.data)

                epoch_loss = running_loss / dataset_sizes[phase]
                epoch_acc = running_corrects / dataset_sizes[phase]

                print('{} Loss: {:.4f} Acc: {:.4f}'.format(
                    phase, epoch_loss, epoch_acc))

                # deep copy the model
                if phase == 'val' and epoch_acc > best_acc:
                    best_acc = epoch_acc
                    best_model_wts = copy.deepcopy(model.state_dict())

            print()

        time_elapsed = time.time() - since
        print('Training complete in {:.0f}m {:.0f}s'.format(
            time_elapsed // 60, time_elapsed % 60))
        print('Best val Acc: {:4f}'.format(best_acc))

        # load best model weights
        model.load_state_dict(best_model_wts)
        return model








Visualizing the model predictions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Generic function to display predictions for a few images




.. code-block:: python


    def visualize_model(model, num_images=6):
        was_training = model.training
        model.eval()
        images_so_far = 0
        fig = plt.figure()

        for i, data in enumerate(dataloaders['val']):
            inputs, labels = data
            if use_gpu:
                inputs, labels = Variable(inputs.cuda()), Variable(labels.cuda())
            else:
                inputs, labels = Variable(inputs), Variable(labels)

            outputs = model(inputs)
            _, preds = torch.max(outputs.data, 1)

            for j in range(inputs.size()[0]):
                images_so_far += 1
                ax = plt.subplot(num_images//2, 2, images_so_far)
                ax.axis('off')
                ax.set_title('predicted: {}'.format(class_names[preds[j]]))
                imshow(inputs.cpu().data[j])

                if images_so_far == num_images:
                    model.train(mode=was_training)
                    return
        model.train(mode=was_training)







Finetuning the convnet
----------------------

Load a pretrained model and reset final fully connected layer.




.. code-block:: python


    model_ft = models.resnet18(pretrained=True)
    num_ftrs = model_ft.fc.in_features
    model_ft.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_ft = model_ft.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that all parameters are being optimized
    optimizer_ft = optim.SGD(model_ft.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_ft, step_size=7, gamma=0.1)







Train and evaluate
^^^^^^^^^^^^^^^^^^

It should take around 15-25 min on CPU. On GPU though, it takes less than a
minute.




.. code-block:: python


    model_ft = train_model(model_ft, criterion, optimizer_ft, exp_lr_scheduler,
                           num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    train Loss: 0.5551 Acc: 0.7090
    val Loss: 0.1827 Acc: 0.9477

    Epoch 1/24
    ----------
    train Loss: 0.5206 Acc: 0.7623
    val Loss: 0.3247 Acc: 0.8758

    Epoch 2/24
    ----------
    train Loss: 0.5646 Acc: 0.7910
    val Loss: 0.2626 Acc: 0.8954

    Epoch 3/24
    ----------
    train Loss: 0.5759 Acc: 0.7664
    val Loss: 0.3003 Acc: 0.8627

    Epoch 4/24
    ----------
    train Loss: 0.3922 Acc: 0.8279
    val Loss: 0.3060 Acc: 0.8824

    Epoch 5/24
    ----------
    train Loss: 0.3931 Acc: 0.8402
    val Loss: 0.2784 Acc: 0.8889

    Epoch 6/24
    ----------
    train Loss: 0.5250 Acc: 0.7582
    val Loss: 0.3380 Acc: 0.8889

    Epoch 7/24
    ----------
    train Loss: 0.3780 Acc: 0.8566
    val Loss: 0.3320 Acc: 0.8758

    Epoch 8/24
    ----------
    train Loss: 0.3363 Acc: 0.8566
    val Loss: 0.2935 Acc: 0.9020

    Epoch 9/24
    ----------
    train Loss: 0.2965 Acc: 0.8566
    val Loss: 0.3074 Acc: 0.8889

    Epoch 10/24
    ----------
    train Loss: 0.2890 Acc: 0.8811
    val Loss: 0.2785 Acc: 0.9216

    Epoch 11/24
    ----------
    train Loss: 0.2815 Acc: 0.8811
    val Loss: 0.2754 Acc: 0.9020

    Epoch 12/24
    ----------
    train Loss: 0.2931 Acc: 0.8607
    val Loss: 0.2776 Acc: 0.9085

    Epoch 13/24
    ----------
    train Loss: 0.2798 Acc: 0.8689
    val Loss: 0.2827 Acc: 0.9085

    Epoch 14/24
    ----------
    train Loss: 0.3658 Acc: 0.8402
    val Loss: 0.2658 Acc: 0.9150

    Epoch 15/24
    ----------
    train Loss: 0.3177 Acc: 0.8402
    val Loss: 0.2567 Acc: 0.9281

    Epoch 16/24
    ----------
    train Loss: 0.2850 Acc: 0.8852
    val Loss: 0.2781 Acc: 0.9085

    Epoch 17/24
    ----------
    train Loss: 0.2577 Acc: 0.8934
    val Loss: 0.2499 Acc: 0.9281

    Epoch 18/24
    ----------
    train Loss: 0.2797 Acc: 0.8975
    val Loss: 0.2798 Acc: 0.9216

    Epoch 19/24
    ----------
    train Loss: 0.2499 Acc: 0.8893
    val Loss: 0.2461 Acc: 0.9281

    Epoch 20/24
    ----------
    train Loss: 0.2415 Acc: 0.9139
    val Loss: 0.2537 Acc: 0.9216

    Epoch 21/24
    ----------
    train Loss: 0.2846 Acc: 0.8770
    val Loss: 0.2485 Acc: 0.9216

    Epoch 22/24
    ----------
    train Loss: 0.3046 Acc: 0.8852
    val Loss: 0.2633 Acc: 0.9216

    Epoch 23/24
    ----------
    train Loss: 0.3169 Acc: 0.8730
    val Loss: 0.2611 Acc: 0.9281

    Epoch 24/24
    ----------
    train Loss: 0.2518 Acc: 0.9016
    val Loss: 0.2548 Acc: 0.9085

    Training complete in 31m 19s
    Best val Acc: 0.947712



.. code-block:: python


    visualize_model(model_ft)





.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_002.png
    :align: center




ConvNet as fixed feature extractor
----------------------------------

Here, we need to freeze all the network except the final layer. We need
to set ``requires_grad == False`` to freeze the parameters so that the
gradients are not computed in ``backward()``.

You can read more about this in the documentation
`here <http://pytorch.org/docs/notes/autograd.html#excluding-subgraphs-from-backward>`__.




.. code-block:: python


    model_conv = torchvision.models.resnet18(pretrained=True)
    for param in model_conv.parameters():
        param.requires_grad = False

    # Parameters of newly constructed modules have requires_grad=True by default
    num_ftrs = model_conv.fc.in_features
    model_conv.fc = nn.Linear(num_ftrs, 2)

    if use_gpu:
        model_conv = model_conv.cuda()

    criterion = nn.CrossEntropyLoss()

    # Observe that only parameters of final layer are being optimized as
    # opoosed to before.
    optimizer_conv = optim.SGD(model_conv.fc.parameters(), lr=0.001, momentum=0.9)

    # Decay LR by a factor of 0.1 every 7 epochs
    exp_lr_scheduler = lr_scheduler.StepLR(optimizer_conv, step_size=7, gamma=0.1)








Train and evaluate
^^^^^^^^^^^^^^^^^^

On CPU this will take about half the time compared to previous scenario.
This is expected as gradients don't need to be computed for most of the
network. However, forward does need to be computed.




.. code-block:: python


    model_conv = train_model(model_conv, criterion, optimizer_conv,
                             exp_lr_scheduler, num_epochs=25)





.. rst-class:: sphx-glr-script-out

 Out::

    Epoch 0/24
    ----------
    train Loss: 0.7272 Acc: 0.6311
    val Loss: 0.2675 Acc: 0.8954

    Epoch 1/24
    ----------
    train Loss: 0.4914 Acc: 0.7910
    val Loss: 0.2329 Acc: 0.8889

    Epoch 2/24
    ----------
    train Loss: 0.4013 Acc: 0.8361
    val Loss: 0.1863 Acc: 0.9477

    Epoch 3/24
    ----------
    train Loss: 0.5667 Acc: 0.7828
    val Loss: 0.2635 Acc: 0.9085

    Epoch 4/24
    ----------
    train Loss: 0.5406 Acc: 0.7869
    val Loss: 0.3081 Acc: 0.8627

    Epoch 5/24
    ----------
    train Loss: 0.5254 Acc: 0.7623
    val Loss: 0.3847 Acc: 0.8366

    Epoch 6/24
    ----------
    train Loss: 0.6395 Acc: 0.7664
    val Loss: 0.2807 Acc: 0.9085

    Epoch 7/24
    ----------
    train Loss: 0.3731 Acc: 0.8443
    val Loss: 0.1983 Acc: 0.9477

    Epoch 8/24
    ----------
    train Loss: 0.3915 Acc: 0.8115
    val Loss: 0.2039 Acc: 0.9477

    Epoch 9/24
    ----------
    train Loss: 0.3620 Acc: 0.8361
    val Loss: 0.1941 Acc: 0.9477

    Epoch 10/24
    ----------
    train Loss: 0.3311 Acc: 0.8074
    val Loss: 0.1945 Acc: 0.9477

    Epoch 11/24
    ----------
    train Loss: 0.3465 Acc: 0.8484
    val Loss: 0.2093 Acc: 0.9477

    Epoch 12/24
    ----------
    train Loss: 0.3256 Acc: 0.8402
    val Loss: 0.2079 Acc: 0.9477

    Epoch 13/24
    ----------
    train Loss: 0.2728 Acc: 0.8934
    val Loss: 0.1884 Acc: 0.9477

    Epoch 14/24
    ----------
    train Loss: 0.3584 Acc: 0.8320
    val Loss: 0.2042 Acc: 0.9412

    Epoch 15/24
    ----------
    train Loss: 0.3355 Acc: 0.8648
    val Loss: 0.1927 Acc: 0.9477

    Epoch 16/24
    ----------
    train Loss: 0.2572 Acc: 0.9057
    val Loss: 0.1941 Acc: 0.9542

    Epoch 17/24
    ----------
    train Loss: 0.3328 Acc: 0.8525
    val Loss: 0.2017 Acc: 0.9477

    Epoch 18/24
    ----------
    train Loss: 0.3404 Acc: 0.8443
    val Loss: 0.1896 Acc: 0.9477

    Epoch 19/24
    ----------
    train Loss: 0.3364 Acc: 0.8689
    val Loss: 0.1905 Acc: 0.9412

    Epoch 20/24
    ----------
    train Loss: 0.3316 Acc: 0.8566
    val Loss: 0.2277 Acc: 0.9281

    Epoch 21/24
    ----------
    train Loss: 0.3177 Acc: 0.8689
    val Loss: 0.2103 Acc: 0.9477

    Epoch 22/24
    ----------
    train Loss: 0.3338 Acc: 0.8648
    val Loss: 0.1988 Acc: 0.9477

    Epoch 23/24
    ----------
    train Loss: 0.3557 Acc: 0.8648
    val Loss: 0.2099 Acc: 0.9542

    Epoch 24/24
    ----------
    train Loss: 0.3326 Acc: 0.8484
    val Loss: 0.1852 Acc: 0.9477

    Training complete in 12m 23s
    Best val Acc: 0.954248



.. code-block:: python


    visualize_model(model_conv)

    plt.ioff()
    plt.show()



.. image:: /beginner/images/sphx_glr_transfer_learning_tutorial_003.png
    :align: center




**Total running time of the script:** ( 43 minutes  50.714 seconds)



.. only :: html

 .. container:: sphx-glr-footer


  .. container:: sphx-glr-download

     :download:`Download Python source code: transfer_learning_tutorial.py <transfer_learning_tutorial.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: transfer_learning_tutorial.ipynb <transfer_learning_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
